plugins {
    id "com.github.johnrengelman.shadow" version "8.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfigs = [
            "mio_zoomer.common.mixins.json"
        ]
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
	modApi "curse.maven:azusaconfig-970148:5078177"
	modApi "maven.modrinth:zoomerlibrary:${rootProject.zoomerlibrary_version}-forge"
	modImplementation "maven.modrinth:obsidianui:${rootProject.obsidianui_version}-forge"

	compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
	implementation(include("io.github.llamalad7:mixinextras-forge:0.3.5"))

	compileOnly "org.quiltmc:quilt-config:${rootProject.quiltconfig_version}"
	compileOnly "org.quiltmc.parsers:json:${rootProject.quiltparsers_version}"
	compileOnly "com.electronwill.night-config:core:${rootProject.nightconfig_version}"
	compileOnly "com.electronwill.night-config:toml:${rootProject.nightconfig_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
